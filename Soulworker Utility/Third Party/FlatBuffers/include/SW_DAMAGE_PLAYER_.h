// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SWDAMAGEPLAYER_SOULMETERFBS_HISTORY_H_
#define FLATBUFFERS_GENERATED_SWDAMAGEPLAYER_SOULMETERFBS_HISTORY_H_

#include "flatbuffers/flatbuffers.h"

namespace SoulMeterFBS {
namespace History {

struct _tDamagePlayer;
struct _tDamagePlayerBuilder;

struct _tSkillCount;
struct _tSkillCountBuilder;

struct _tDamageMonster;
struct _tDamageMonsterBuilder;

struct _tDamageSkill;
struct _tDamageSkillBuilder;

struct _tDamagePlayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tDamagePlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT__DAMAGE = 6,
    VT__SOULSTONEDAMAGE = 8,
    VT__HITCOUNT = 10,
    VT__CRITHITCOUNT = 12,
    VT__MAXCOMBO = 14,
    VT__HITCOUNTFORCRITRATE = 16,
    VT__CRITHITCOUNTFORCRITRATE = 18,
    VT__MISSCOUNT = 20,
    VT__SOULSTONECOUNT = 22,
    VT__DAMAGEFORSOULSTONE = 24,
    VT__SOULSTONEDAMAGEFORSOULSTONE = 26,
    VT__HITCOUNTFORARMORBREAK = 28,
    VT__ARMORBREAK = 30,
    VT__SG = 32,
    VT__STAMINA = 34,
    VT__SV = 36,
    VT__ATTACKSPEED = 38,
    VT__PARTIALDAMAGE = 40,
    VT__GETHITALL = 42,
    VT__GETHIT = 44,
    VT__GETHITBS = 46,
    VT__GETHITMISSED = 48,
    VT__GETHITMISSEDREAL = 50,
    VT__ENLIGHTENSUM = 52,
    VT__GIGAENLIGHTENPROC = 54,
    VT__TERAENLIGHTENPROC = 56,
    VT__SKILLCOUNTS = 58,
    VT__DODGECOUNTS = 60,
    VT__DEATHCOUNTS = 62,
    VT__HISTORYAVGAB = 64,
    VT__HISTORYAVGBD = 66,
    VT__HISTORYGEAR90 = 68,
    VT__HISTORYGEAR50 = 70,
    VT__HISTORYACC01 = 72,
    VT__HISTORYACC02 = 74,
    VT__HISTORYLOSEDHP = 76,
    VT__JQSTACK = 78,
    VT__HISTORYABTIME = 80,
    VT__MONSTERINFO = 82,
    VT__SKILLCOUNT = 84,
    VT__HISTORYAGGROTIME = 86,
    VT__HISTORYAVGAS = 88,
    VT__HISTORYASTIME = 90,
    VT__TERAFEVERNPROC = 92
  };
  uint32_t _id() const {
    return GetField<uint32_t>(VT__ID, 0);
  }
  uint64_t _damage() const {
    return GetField<uint64_t>(VT__DAMAGE, 0);
  }
  uint64_t _soulstonedamage() const {
    return GetField<uint64_t>(VT__SOULSTONEDAMAGE, 0);
  }
  uint16_t _hitcount() const {
    return GetField<uint16_t>(VT__HITCOUNT, 0);
  }
  uint16_t _crithitcount() const {
    return GetField<uint16_t>(VT__CRITHITCOUNT, 0);
  }
  uint16_t _maxcombo() const {
    return GetField<uint16_t>(VT__MAXCOMBO, 0);
  }
  uint16_t _hitcountforcritrate() const {
    return GetField<uint16_t>(VT__HITCOUNTFORCRITRATE, 0);
  }
  uint16_t _crithitcountforcritrate() const {
    return GetField<uint16_t>(VT__CRITHITCOUNTFORCRITRATE, 0);
  }
  uint16_t _misscount() const {
    return GetField<uint16_t>(VT__MISSCOUNT, 0);
  }
  uint16_t _soulstonecount() const {
    return GetField<uint16_t>(VT__SOULSTONECOUNT, 0);
  }
  uint64_t _damageforsoulstone() const {
    return GetField<uint64_t>(VT__DAMAGEFORSOULSTONE, 0);
  }
  uint64_t _soulstonedamageforsoulstone() const {
    return GetField<uint64_t>(VT__SOULSTONEDAMAGEFORSOULSTONE, 0);
  }
  uint16_t _hitcountforarmorbreak() const {
    return GetField<uint16_t>(VT__HITCOUNTFORARMORBREAK, 0);
  }
  float _armorbreak() const {
    return GetField<float>(VT__ARMORBREAK, 0.0f);
  }
  float _sg() const {
    return GetField<float>(VT__SG, 0.0f);
  }
  float _stamina() const {
    return GetField<float>(VT__STAMINA, 0.0f);
  }
  float _sv() const {
    return GetField<float>(VT__SV, 0.0f);
  }
  float _attackspeed() const {
    return GetField<float>(VT__ATTACKSPEED, 0.0f);
  }
  float _partialdamage() const {
    return GetField<float>(VT__PARTIALDAMAGE, 0.0f);
  }
  uint16_t _gethitall() const {
    return GetField<uint16_t>(VT__GETHITALL, 0);
  }
  uint16_t _gethit() const {
    return GetField<uint16_t>(VT__GETHIT, 0);
  }
  uint16_t _gethitbs() const {
    return GetField<uint16_t>(VT__GETHITBS, 0);
  }
  uint16_t _gethitmissed() const {
    return GetField<uint16_t>(VT__GETHITMISSED, 0);
  }
  uint16_t _gethitmissedreal() const {
    return GetField<uint16_t>(VT__GETHITMISSEDREAL, 0);
  }
  float _enlightensum() const {
    return GetField<float>(VT__ENLIGHTENSUM, 0.0f);
  }
  uint16_t _gigaenlightenproc() const {
    return GetField<uint16_t>(VT__GIGAENLIGHTENPROC, 0);
  }
  uint16_t _teraenlightenproc() const {
    return GetField<uint16_t>(VT__TERAENLIGHTENPROC, 0);
  }
  uint16_t _terafevernproc() const {
      return GetField<uint16_t>(VT__TERAFEVERNPROC, 0);
  }
  uint16_t _skillcounts() const {
    return GetField<uint16_t>(VT__SKILLCOUNTS, 0);
  }
  uint16_t _dodgecounts() const {
    return GetField<uint16_t>(VT__DODGECOUNTS, 0);
  }
  uint16_t _deathcounts() const {
    return GetField<uint16_t>(VT__DEATHCOUNTS, 0);
  }
  double _historyavgab() const {
    return GetField<double>(VT__HISTORYAVGAB, 0.0);
  }
  double _historyavgbd() const {
    return GetField<double>(VT__HISTORYAVGBD, 0.0);
  }
  double _historygear90() const {
    return GetField<double>(VT__HISTORYGEAR90, 0.0);
  }
  double _historygear50() const {
    return GetField<double>(VT__HISTORYGEAR50, 0.0);
  }
  double _historyacc01() const {
    return GetField<double>(VT__HISTORYACC01, 0.0);
  }
  double _historyacc02() const {
    return GetField<double>(VT__HISTORYACC02, 0.0);
  }
  double _historylosedhp() const {
    return GetField<double>(VT__HISTORYLOSEDHP, 0.0);
  }
  uint8_t _jqstack() const {
    return GetField<uint8_t>(VT__JQSTACK, 0);
  }
  double _historyabtime() const {
    return GetField<double>(VT__HISTORYABTIME, 0.0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>> *_monsterinfo() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>> *>(VT__MONSTERINFO);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>> *_skillcount() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>> *>(VT__SKILLCOUNT);
  }
  double _historyaggrotime() const {
    return GetField<double>(VT__HISTORYAGGROTIME, 0.0);
  }
  double _historyavgas() const {
    return GetField<double>(VT__HISTORYAVGAS, 0.0);
  }
  double _historyastime() const {
    return GetField<double>(VT__HISTORYASTIME, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT__ID) &&
           VerifyField<uint64_t>(verifier, VT__DAMAGE) &&
           VerifyField<uint64_t>(verifier, VT__SOULSTONEDAMAGE) &&
           VerifyField<uint16_t>(verifier, VT__HITCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__CRITHITCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__MAXCOMBO) &&
           VerifyField<uint16_t>(verifier, VT__HITCOUNTFORCRITRATE) &&
           VerifyField<uint16_t>(verifier, VT__CRITHITCOUNTFORCRITRATE) &&
           VerifyField<uint16_t>(verifier, VT__MISSCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__SOULSTONECOUNT) &&
           VerifyField<uint64_t>(verifier, VT__DAMAGEFORSOULSTONE) &&
           VerifyField<uint64_t>(verifier, VT__SOULSTONEDAMAGEFORSOULSTONE) &&
           VerifyField<uint16_t>(verifier, VT__HITCOUNTFORARMORBREAK) &&
           VerifyField<float>(verifier, VT__ARMORBREAK) &&
           VerifyField<float>(verifier, VT__SG) &&
           VerifyField<float>(verifier, VT__STAMINA) &&
           VerifyField<float>(verifier, VT__SV) &&
           VerifyField<float>(verifier, VT__ATTACKSPEED) &&
           VerifyField<float>(verifier, VT__PARTIALDAMAGE) &&
           VerifyField<uint16_t>(verifier, VT__GETHITALL) &&
           VerifyField<uint16_t>(verifier, VT__GETHIT) &&
           VerifyField<uint16_t>(verifier, VT__GETHITBS) &&
           VerifyField<uint16_t>(verifier, VT__GETHITMISSED) &&
           VerifyField<uint16_t>(verifier, VT__GETHITMISSEDREAL) &&
           VerifyField<float>(verifier, VT__ENLIGHTENSUM) &&
           VerifyField<uint16_t>(verifier, VT__GIGAENLIGHTENPROC) &&
           VerifyField<uint16_t>(verifier, VT__TERAENLIGHTENPROC) &&
           VerifyField<uint16_t>(verifier, VT__SKILLCOUNTS) &&
           VerifyField<uint16_t>(verifier, VT__DODGECOUNTS) &&
           VerifyField<uint16_t>(verifier, VT__DEATHCOUNTS) &&
           VerifyField<double>(verifier, VT__HISTORYAVGAB) &&
           VerifyField<double>(verifier, VT__HISTORYAVGBD) &&
           VerifyField<double>(verifier, VT__HISTORYGEAR90) &&
           VerifyField<double>(verifier, VT__HISTORYGEAR50) &&
           VerifyField<double>(verifier, VT__HISTORYACC01) &&
           VerifyField<double>(verifier, VT__HISTORYACC02) &&
           VerifyField<double>(verifier, VT__HISTORYLOSEDHP) &&
           VerifyField<uint8_t>(verifier, VT__JQSTACK) &&
           VerifyField<double>(verifier, VT__HISTORYABTIME) &&
           VerifyOffset(verifier, VT__MONSTERINFO) &&
           verifier.VerifyVector(_monsterinfo()) &&
           verifier.VerifyVectorOfTables(_monsterinfo()) &&
           VerifyOffset(verifier, VT__SKILLCOUNT) &&
           verifier.VerifyVector(_skillcount()) &&
           verifier.VerifyVectorOfTables(_skillcount()) &&
           VerifyField<double>(verifier, VT__HISTORYAGGROTIME) &&
           VerifyField<double>(verifier, VT__HISTORYAVGAS) &&
           VerifyField<double>(verifier, VT__HISTORYASTIME) &&
           verifier.EndTable();
  }
};

struct _tDamagePlayerBuilder {
  typedef _tDamagePlayer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(uint32_t _id) {
    fbb_.AddElement<uint32_t>(_tDamagePlayer::VT__ID, _id, 0);
  }
  void add__damage(uint64_t _damage) {
    fbb_.AddElement<uint64_t>(_tDamagePlayer::VT__DAMAGE, _damage, 0);
  }
  void add__soulstonedamage(uint64_t _soulstonedamage) {
    fbb_.AddElement<uint64_t>(_tDamagePlayer::VT__SOULSTONEDAMAGE, _soulstonedamage, 0);
  }
  void add__hitcount(uint16_t _hitcount) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__HITCOUNT, _hitcount, 0);
  }
  void add__crithitcount(uint16_t _crithitcount) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__CRITHITCOUNT, _crithitcount, 0);
  }
  void add__maxcombo(uint16_t _maxcombo) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__MAXCOMBO, _maxcombo, 0);
  }
  void add__hitcountforcritrate(uint16_t _hitcountforcritrate) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__HITCOUNTFORCRITRATE, _hitcountforcritrate, 0);
  }
  void add__crithitcountforcritrate(uint16_t _crithitcountforcritrate) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__CRITHITCOUNTFORCRITRATE, _crithitcountforcritrate, 0);
  }
  void add__misscount(uint16_t _misscount) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__MISSCOUNT, _misscount, 0);
  }
  void add__soulstonecount(uint16_t _soulstonecount) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__SOULSTONECOUNT, _soulstonecount, 0);
  }
  void add__damageforsoulstone(uint64_t _damageforsoulstone) {
    fbb_.AddElement<uint64_t>(_tDamagePlayer::VT__DAMAGEFORSOULSTONE, _damageforsoulstone, 0);
  }
  void add__soulstonedamageforsoulstone(uint64_t _soulstonedamageforsoulstone) {
    fbb_.AddElement<uint64_t>(_tDamagePlayer::VT__SOULSTONEDAMAGEFORSOULSTONE, _soulstonedamageforsoulstone, 0);
  }
  void add__hitcountforarmorbreak(uint16_t _hitcountforarmorbreak) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__HITCOUNTFORARMORBREAK, _hitcountforarmorbreak, 0);
  }
  void add__armorbreak(float _armorbreak) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__ARMORBREAK, _armorbreak, 0.0f);
  }
  void add__sg(float _sg) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__SG, _sg, 0.0f);
  }
  void add__stamina(float _stamina) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__STAMINA, _stamina, 0.0f);
  }
  void add__sv(float _sv) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__SV, _sv, 0.0f);
  }
  void add__attackspeed(float _attackspeed) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__ATTACKSPEED, _attackspeed, 0.0f);
  }
  void add__partialdamage(float _partialdamage) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__PARTIALDAMAGE, _partialdamage, 0.0f);
  }
  void add__gethitall(uint16_t _gethitall) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GETHITALL, _gethitall, 0);
  }
  void add__gethit(uint16_t _gethit) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GETHIT, _gethit, 0);
  }
  void add__gethitbs(uint16_t _gethitbs) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GETHITBS, _gethitbs, 0);
  }
  void add__gethitmissed(uint16_t _gethitmissed) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GETHITMISSED, _gethitmissed, 0);
  }
  void add__gethitmissedreal(uint16_t _gethitmissedreal) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GETHITMISSEDREAL, _gethitmissedreal, 0);
  }
  void add__enlightensum(float _enlightensum) {
    fbb_.AddElement<float>(_tDamagePlayer::VT__ENLIGHTENSUM, _enlightensum, 0.0f);
  }
  void add__gigaenlightenproc(uint16_t _gigaenlightenproc) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__GIGAENLIGHTENPROC, _gigaenlightenproc, 0);
  }
  void add__teraenlightenproc(uint16_t _teraenlightenproc) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__TERAENLIGHTENPROC, _teraenlightenproc, 0);
  }
  void add__terafevernproc(uint16_t _terafevernproc) {
      fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__TERAFEVERNPROC, _terafevernproc, 0);
  }
  void add__skillcounts(uint16_t _skillcounts) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__SKILLCOUNTS, _skillcounts, 0);
  }
  void add__dodgecounts(uint16_t _dodgecounts) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__DODGECOUNTS, _dodgecounts, 0);
  }
  void add__deathcounts(uint16_t _deathcounts) {
    fbb_.AddElement<uint16_t>(_tDamagePlayer::VT__DEATHCOUNTS, _deathcounts, 0);
  }
  void add__historyavgab(double _historyavgab) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYAVGAB, _historyavgab, 0.0);
  }
  void add__historyavgbd(double _historyavgbd) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYAVGBD, _historyavgbd, 0.0);
  }
  void add__historygear90(double _historygear90) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYGEAR90, _historygear90, 0.0);
  }
  void add__historygear50(double _historygear50) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYGEAR50, _historygear50, 0.0);
  }
  void add__historyacc01(double _historyacc01) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYACC01, _historyacc01, 0.0);
  }
  void add__historyacc02(double _historyacc02) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYACC02, _historyacc02, 0.0);
  }
  void add__historylosedhp(double _historylosedhp) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYLOSEDHP, _historylosedhp, 0.0);
  }
  void add__jqstack(uint8_t _jqstack) {
    fbb_.AddElement<uint8_t>(_tDamagePlayer::VT__JQSTACK, _jqstack, 0);
  }
  void add__historyabtime(double _historyabtime) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYABTIME, _historyabtime, 0.0);
  }
  void add__monsterinfo(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>>> _monsterinfo) {
    fbb_.AddOffset(_tDamagePlayer::VT__MONSTERINFO, _monsterinfo);
  }
  void add__skillcount(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>>> _skillcount) {
    fbb_.AddOffset(_tDamagePlayer::VT__SKILLCOUNT, _skillcount);
  }
  void add__historyaggrotime(double _historyaggrotime) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYAGGROTIME, _historyaggrotime, 0.0);
  }
  void add__historyavgas(double _historyavgas) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYAVGAS, _historyavgas, 0.0);
  }
  void add__historyastime(double _historyastime) {
    fbb_.AddElement<double>(_tDamagePlayer::VT__HISTORYASTIME, _historyastime, 0.0);
  }
  explicit _tDamagePlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tDamagePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tDamagePlayer>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tDamagePlayer> Create_tDamagePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint64_t _damage = 0,
    uint64_t _soulstonedamage = 0,
    uint16_t _hitcount = 0,
    uint16_t _crithitcount = 0,
    uint16_t _maxcombo = 0,
    uint16_t _hitcountforcritrate = 0,
    uint16_t _crithitcountforcritrate = 0,
    uint16_t _misscount = 0,
    uint16_t _soulstonecount = 0,
    uint64_t _damageforsoulstone = 0,
    uint64_t _soulstonedamageforsoulstone = 0,
    uint16_t _hitcountforarmorbreak = 0,
    float _armorbreak = 0.0f,
    float _sg = 0.0f,
    float _stamina = 0.0f,
    float _sv = 0.0f,
    float _attackspeed = 0.0f,
    float _partialdamage = 0.0f,
    uint16_t _gethitall = 0,
    uint16_t _gethit = 0,
    uint16_t _gethitbs = 0,
    uint16_t _gethitmissed = 0,
    uint16_t _gethitmissedreal = 0,
    float _enlightensum = 0.0f,
    uint16_t _gigaenlightenproc = 0,
    uint16_t _teraenlightenproc = 0,
    uint16_t _skillcounts = 0,
    uint16_t _dodgecounts = 0,
    uint16_t _deathcounts = 0,
    double _historyavgab = 0.0,
    double _historyavgbd = 0.0,
    double _historygear90 = 0.0,
    double _historygear50 = 0.0,
    double _historyacc01 = 0.0,
    double _historyacc02 = 0.0,
    double _historylosedhp = 0.0,
    uint8_t _jqstack = 0,
    double _historyabtime = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>>> _monsterinfo = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>>> _skillcount = 0,
    double _historyaggrotime = 0.0,
    double _historyavgas = 0.0,
    double _historyastime = 0.0) {
  _tDamagePlayerBuilder builder_(_fbb);
  builder_.add__historyastime(_historyastime);
  builder_.add__historyavgas(_historyavgas);
  builder_.add__historyaggrotime(_historyaggrotime);
  builder_.add__historyabtime(_historyabtime);
  builder_.add__historylosedhp(_historylosedhp);
  builder_.add__historyacc02(_historyacc02);
  builder_.add__historyacc01(_historyacc01);
  builder_.add__historygear50(_historygear50);
  builder_.add__historygear90(_historygear90);
  builder_.add__historyavgbd(_historyavgbd);
  builder_.add__historyavgab(_historyavgab);
  builder_.add__soulstonedamageforsoulstone(_soulstonedamageforsoulstone);
  builder_.add__damageforsoulstone(_damageforsoulstone);
  builder_.add__soulstonedamage(_soulstonedamage);
  builder_.add__damage(_damage);
  builder_.add__skillcount(_skillcount);
  builder_.add__monsterinfo(_monsterinfo);
  builder_.add__enlightensum(_enlightensum);
  builder_.add__partialdamage(_partialdamage);
  builder_.add__attackspeed(_attackspeed);
  builder_.add__sv(_sv);
  builder_.add__stamina(_stamina);
  builder_.add__sg(_sg);
  builder_.add__armorbreak(_armorbreak);
  builder_.add__id(_id);
  builder_.add__deathcounts(_deathcounts);
  builder_.add__dodgecounts(_dodgecounts);
  builder_.add__skillcounts(_skillcounts);
  builder_.add__teraenlightenproc(_teraenlightenproc);
  builder_.add__gigaenlightenproc(_gigaenlightenproc);
  builder_.add__gethitmissedreal(_gethitmissedreal);
  builder_.add__gethitmissed(_gethitmissed);
  builder_.add__gethitbs(_gethitbs);
  builder_.add__gethit(_gethit);
  builder_.add__gethitall(_gethitall);
  builder_.add__hitcountforarmorbreak(_hitcountforarmorbreak);
  builder_.add__soulstonecount(_soulstonecount);
  builder_.add__misscount(_misscount);
  builder_.add__crithitcountforcritrate(_crithitcountforcritrate);
  builder_.add__hitcountforcritrate(_hitcountforcritrate);
  builder_.add__maxcombo(_maxcombo);
  builder_.add__crithitcount(_crithitcount);
  builder_.add__hitcount(_hitcount);
  builder_.add__jqstack(_jqstack);
  return builder_.Finish();
}

inline flatbuffers::Offset<_tDamagePlayer> Create_tDamagePlayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint64_t _damage = 0,
    uint64_t _soulstonedamage = 0,
    uint16_t _hitcount = 0,
    uint16_t _crithitcount = 0,
    uint16_t _maxcombo = 0,
    uint16_t _hitcountforcritrate = 0,
    uint16_t _crithitcountforcritrate = 0,
    uint16_t _misscount = 0,
    uint16_t _soulstonecount = 0,
    uint64_t _damageforsoulstone = 0,
    uint64_t _soulstonedamageforsoulstone = 0,
    uint16_t _hitcountforarmorbreak = 0,
    float _armorbreak = 0.0f,
    float _sg = 0.0f,
    float _stamina = 0.0f,
    float _sv = 0.0f,
    float _attackspeed = 0.0f,
    float _partialdamage = 0.0f,
    uint16_t _gethitall = 0,
    uint16_t _gethit = 0,
    uint16_t _gethitbs = 0,
    uint16_t _gethitmissed = 0,
    uint16_t _gethitmissedreal = 0,
    float _enlightensum = 0.0f,
    uint16_t _gigaenlightenproc = 0,
    uint16_t _teraenlightenproc = 0,
    uint16_t _skillcounts = 0,
    uint16_t _dodgecounts = 0,
    uint16_t _deathcounts = 0,
    double _historyavgab = 0.0,
    double _historyavgbd = 0.0,
    double _historygear90 = 0.0,
    double _historygear50 = 0.0,
    double _historyacc01 = 0.0,
    double _historyacc02 = 0.0,
    double _historylosedhp = 0.0,
    uint8_t _jqstack = 0,
    double _historyabtime = 0.0,
    const std::vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>> *_monsterinfo = nullptr,
    const std::vector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>> *_skillcount = nullptr,
    double _historyaggrotime = 0.0,
    double _historyavgas = 0.0,
    double _historyastime = 0.0) {
  auto _monsterinfo__ = _monsterinfo ? _fbb.CreateVector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageMonster>>(*_monsterinfo) : 0;
  auto _skillcount__ = _skillcount ? _fbb.CreateVector<flatbuffers::Offset<SoulMeterFBS::History::_tSkillCount>>(*_skillcount) : 0;
  return SoulMeterFBS::History::Create_tDamagePlayer(
      _fbb,
      _id,
      _damage,
      _soulstonedamage,
      _hitcount,
      _crithitcount,
      _maxcombo,
      _hitcountforcritrate,
      _crithitcountforcritrate,
      _misscount,
      _soulstonecount,
      _damageforsoulstone,
      _soulstonedamageforsoulstone,
      _hitcountforarmorbreak,
      _armorbreak,
      _sg,
      _stamina,
      _sv,
      _attackspeed,
      _partialdamage,
      _gethitall,
      _gethit,
      _gethitbs,
      _gethitmissed,
      _gethitmissedreal,
      _enlightensum,
      _gigaenlightenproc,
      _teraenlightenproc,
      _skillcounts,
      _dodgecounts,
      _deathcounts,
      _historyavgab,
      _historyavgbd,
      _historygear90,
      _historygear50,
      _historyacc01,
      _historyacc02,
      _historylosedhp,
      _jqstack,
      _historyabtime,
      _monsterinfo__,
      _skillcount__,
      _historyaggrotime,
      _historyavgas,
      _historyastime);
}

struct _tSkillCount FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tSkillCountBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT__COUNT = 6,
    VT__IN_FULL_AB_COUNT = 8
  };
  uint32_t _id() const {
    return GetField<uint32_t>(VT__ID, 0);
  }
  uint16_t _count() const {
    return GetField<uint16_t>(VT__COUNT, 0);
  }
  uint16_t _in_full_ab_count() const {
    return GetField<uint16_t>(VT__IN_FULL_AB_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT__ID) &&
           VerifyField<uint16_t>(verifier, VT__COUNT) &&
           VerifyField<uint16_t>(verifier, VT__IN_FULL_AB_COUNT) &&
           verifier.EndTable();
  }
};

struct _tSkillCountBuilder {
  typedef _tSkillCount Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(uint32_t _id) {
    fbb_.AddElement<uint32_t>(_tSkillCount::VT__ID, _id, 0);
  }
  void add__count(uint16_t _count) {
    fbb_.AddElement<uint16_t>(_tSkillCount::VT__COUNT, _count, 0);
  }
  void add__in_full_ab_count(uint16_t _in_full_ab_count) {
    fbb_.AddElement<uint16_t>(_tSkillCount::VT__IN_FULL_AB_COUNT, _in_full_ab_count, 0);
  }
  explicit _tSkillCountBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tSkillCount> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tSkillCount>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tSkillCount> Create_tSkillCount(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint16_t _count = 0,
    uint16_t _in_full_ab_count = 0) {
  _tSkillCountBuilder builder_(_fbb);
  builder_.add__id(_id);
  builder_.add__in_full_ab_count(_in_full_ab_count);
  builder_.add__count(_count);
  return builder_.Finish();
}

struct _tDamageMonster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tDamageMonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT__DB2 = 6,
    VT__DAMAGE = 8,
    VT__CRITDAMAGE = 10,
    VT__HITCOUNT = 12,
    VT__CRITHITCOUNT = 14,
    VT__TYPE = 16,
    VT__SKILLINFO = 18
  };
  uint32_t _id() const {
    return GetField<uint32_t>(VT__ID, 0);
  }
  uint32_t _db2() const {
    return GetField<uint32_t>(VT__DB2, 0);
  }
  uint64_t _damage() const {
    return GetField<uint64_t>(VT__DAMAGE, 0);
  }
  uint64_t _critdamage() const {
    return GetField<uint64_t>(VT__CRITDAMAGE, 0);
  }
  uint16_t _hitcount() const {
    return GetField<uint16_t>(VT__HITCOUNT, 0);
  }
  uint16_t _crithitcount() const {
    return GetField<uint16_t>(VT__CRITHITCOUNT, 0);
  }
  int32_t _type() const {
    return GetField<int32_t>(VT__TYPE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>> *_skillinfo() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>> *>(VT__SKILLINFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT__ID) &&
           VerifyField<uint32_t>(verifier, VT__DB2) &&
           VerifyField<uint64_t>(verifier, VT__DAMAGE) &&
           VerifyField<uint64_t>(verifier, VT__CRITDAMAGE) &&
           VerifyField<uint16_t>(verifier, VT__HITCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__CRITHITCOUNT) &&
           VerifyField<int32_t>(verifier, VT__TYPE) &&
           VerifyOffset(verifier, VT__SKILLINFO) &&
           verifier.VerifyVector(_skillinfo()) &&
           verifier.VerifyVectorOfTables(_skillinfo()) &&
           verifier.EndTable();
  }
};

struct _tDamageMonsterBuilder {
  typedef _tDamageMonster Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(uint32_t _id) {
    fbb_.AddElement<uint32_t>(_tDamageMonster::VT__ID, _id, 0);
  }
  void add__db2(uint32_t _db2) {
    fbb_.AddElement<uint32_t>(_tDamageMonster::VT__DB2, _db2, 0);
  }
  void add__damage(uint64_t _damage) {
    fbb_.AddElement<uint64_t>(_tDamageMonster::VT__DAMAGE, _damage, 0);
  }
  void add__critdamage(uint64_t _critdamage) {
    fbb_.AddElement<uint64_t>(_tDamageMonster::VT__CRITDAMAGE, _critdamage, 0);
  }
  void add__hitcount(uint16_t _hitcount) {
    fbb_.AddElement<uint16_t>(_tDamageMonster::VT__HITCOUNT, _hitcount, 0);
  }
  void add__crithitcount(uint16_t _crithitcount) {
    fbb_.AddElement<uint16_t>(_tDamageMonster::VT__CRITHITCOUNT, _crithitcount, 0);
  }
  void add__type(int32_t _type) {
    fbb_.AddElement<int32_t>(_tDamageMonster::VT__TYPE, _type, 0);
  }
  void add__skillinfo(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>>> _skillinfo) {
    fbb_.AddOffset(_tDamageMonster::VT__SKILLINFO, _skillinfo);
  }
  explicit _tDamageMonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tDamageMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tDamageMonster>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tDamageMonster> Create_tDamageMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint32_t _db2 = 0,
    uint64_t _damage = 0,
    uint64_t _critdamage = 0,
    uint16_t _hitcount = 0,
    uint16_t _crithitcount = 0,
    int32_t _type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>>> _skillinfo = 0) {
  _tDamageMonsterBuilder builder_(_fbb);
  builder_.add__critdamage(_critdamage);
  builder_.add__damage(_damage);
  builder_.add__skillinfo(_skillinfo);
  builder_.add__type(_type);
  builder_.add__db2(_db2);
  builder_.add__id(_id);
  builder_.add__crithitcount(_crithitcount);
  builder_.add__hitcount(_hitcount);
  return builder_.Finish();
}

inline flatbuffers::Offset<_tDamageMonster> Create_tDamageMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint32_t _db2 = 0,
    uint64_t _damage = 0,
    uint64_t _critdamage = 0,
    uint16_t _hitcount = 0,
    uint16_t _crithitcount = 0,
    int32_t _type = 0,
    const std::vector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>> *_skillinfo = nullptr) {
  auto _skillinfo__ = _skillinfo ? _fbb.CreateVector<flatbuffers::Offset<SoulMeterFBS::History::_tDamageSkill>>(*_skillinfo) : 0;
  return SoulMeterFBS::History::Create_tDamageMonster(
      _fbb,
      _id,
      _db2,
      _damage,
      _critdamage,
      _hitcount,
      _crithitcount,
      _type,
      _skillinfo__);
}

struct _tDamageSkill FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tDamageSkillBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT__DAMAGE = 6,
    VT__CRITDAMAGE = 8,
    VT__HITCOUNT = 10,
    VT__CRITHITCOUNT = 12,
    VT__SKILLCASTS = 14
  };
  uint32_t _id() const {
    return GetField<uint32_t>(VT__ID, 0);
  }
  uint64_t _damage() const {
    return GetField<uint64_t>(VT__DAMAGE, 0);
  }
  uint64_t _critdamage() const {
    return GetField<uint64_t>(VT__CRITDAMAGE, 0);
  }
  uint16_t _hitcount() const {
    return GetField<uint16_t>(VT__HITCOUNT, 0);
  }
  uint16_t _crithitcount() const {
    return GetField<uint16_t>(VT__CRITHITCOUNT, 0);
  }
  uint16_t _skillcasts() const {
    return GetField<uint16_t>(VT__SKILLCASTS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT__ID) &&
           VerifyField<uint64_t>(verifier, VT__DAMAGE) &&
           VerifyField<uint64_t>(verifier, VT__CRITDAMAGE) &&
           VerifyField<uint16_t>(verifier, VT__HITCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__CRITHITCOUNT) &&
           VerifyField<uint16_t>(verifier, VT__SKILLCASTS) &&
           verifier.EndTable();
  }
};

struct _tDamageSkillBuilder {
  typedef _tDamageSkill Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(uint32_t _id) {
    fbb_.AddElement<uint32_t>(_tDamageSkill::VT__ID, _id, 0);
  }
  void add__damage(uint64_t _damage) {
    fbb_.AddElement<uint64_t>(_tDamageSkill::VT__DAMAGE, _damage, 0);
  }
  void add__critdamage(uint64_t _critdamage) {
    fbb_.AddElement<uint64_t>(_tDamageSkill::VT__CRITDAMAGE, _critdamage, 0);
  }
  void add__hitcount(uint16_t _hitcount) {
    fbb_.AddElement<uint16_t>(_tDamageSkill::VT__HITCOUNT, _hitcount, 0);
  }
  void add__crithitcount(uint16_t _crithitcount) {
    fbb_.AddElement<uint16_t>(_tDamageSkill::VT__CRITHITCOUNT, _crithitcount, 0);
  }
  void add__skillcasts(uint16_t _skillcasts) {
    fbb_.AddElement<uint16_t>(_tDamageSkill::VT__SKILLCASTS, _skillcasts, 0);
  }
  explicit _tDamageSkillBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tDamageSkill> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tDamageSkill>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tDamageSkill> Create_tDamageSkill(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint64_t _damage = 0,
    uint64_t _critdamage = 0,
    uint16_t _hitcount = 0,
    uint16_t _crithitcount = 0,
    uint16_t _skillcasts = 0) {
  _tDamageSkillBuilder builder_(_fbb);
  builder_.add__critdamage(_critdamage);
  builder_.add__damage(_damage);
  builder_.add__id(_id);
  builder_.add__skillcasts(_skillcasts);
  builder_.add__crithitcount(_crithitcount);
  builder_.add__hitcount(_hitcount);
  return builder_.Finish();
}

inline const SoulMeterFBS::History::_tDamagePlayer *Get_tDamagePlayer(const void *buf) {
  return flatbuffers::GetRoot<SoulMeterFBS::History::_tDamagePlayer>(buf);
}

inline const SoulMeterFBS::History::_tDamagePlayer *GetSizePrefixed_tDamagePlayer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SoulMeterFBS::History::_tDamagePlayer>(buf);
}

inline bool Verify_tDamagePlayerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SoulMeterFBS::History::_tDamagePlayer>(nullptr);
}

inline bool VerifySizePrefixed_tDamagePlayerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SoulMeterFBS::History::_tDamagePlayer>(nullptr);
}

inline void Finish_tDamagePlayerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SoulMeterFBS::History::_tDamagePlayer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixed_tDamagePlayerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SoulMeterFBS::History::_tDamagePlayer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace History
}  // namespace SoulMeterFBS

#endif  // FLATBUFFERS_GENERATED_SWDAMAGEPLAYER_SOULMETERFBS_HISTORY_H_
