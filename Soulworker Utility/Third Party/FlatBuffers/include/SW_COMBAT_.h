// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SWCOMBAT_SOULMETERFBS_HISTORY_H_
#define FLATBUFFERS_GENERATED_SWCOMBAT_SOULMETERFBS_HISTORY_H_

#include "flatbuffers/flatbuffers.h"

#include "STRUCT_.h"

namespace SoulMeterFBS {
namespace History {

struct _tCombat;
struct _tCombatBuilder;

struct _tCombatInterface;
struct _tCombatInterfaceBuilder;

struct _tCombatLog;
struct _tCombatLogBuilder;

struct _tCombat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tCombatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__ID = 4,
    VT__TYPE = 6,
    VT__COMBAT_LOG = 8
  };
  uint32_t _id() const {
    return GetField<uint32_t>(VT__ID, 0);
  }
  uint32_t _type() const {
    return GetField<uint32_t>(VT__TYPE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>> *_combat_log() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>> *>(VT__COMBAT_LOG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT__ID) &&
           VerifyField<uint32_t>(verifier, VT__TYPE) &&
           VerifyOffset(verifier, VT__COMBAT_LOG) &&
           verifier.VerifyVector(_combat_log()) &&
           verifier.VerifyVectorOfTables(_combat_log()) &&
           verifier.EndTable();
  }
};

struct _tCombatBuilder {
  typedef _tCombat Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__id(uint32_t _id) {
    fbb_.AddElement<uint32_t>(_tCombat::VT__ID, _id, 0);
  }
  void add__type(uint32_t _type) {
    fbb_.AddElement<uint32_t>(_tCombat::VT__TYPE, _type, 0);
  }
  void add__combat_log(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>>> _combat_log) {
    fbb_.AddOffset(_tCombat::VT__COMBAT_LOG, _combat_log);
  }
  explicit _tCombatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tCombat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tCombat>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tCombat> Create_tCombat(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint32_t _type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>>> _combat_log = 0) {
  _tCombatBuilder builder_(_fbb);
  builder_.add__combat_log(_combat_log);
  builder_.add__type(_type);
  builder_.add__id(_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<_tCombat> Create_tCombatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t _id = 0,
    uint32_t _type = 0,
    const std::vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>> *_combat_log = nullptr) {
  auto _combat_log__ = _combat_log ? _fbb.CreateVector<flatbuffers::Offset<SoulMeterFBS::History::_tCombatLog>>(*_combat_log) : 0;
  return SoulMeterFBS::History::Create_tCombat(
      _fbb,
      _id,
      _type,
      _combat_log__);
}

struct _tCombatInterface FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tCombatInterfaceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__COMBAT = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>> *_combat() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>> *>(VT__COMBAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT__COMBAT) &&
           verifier.VerifyVector(_combat()) &&
           verifier.VerifyVectorOfTables(_combat()) &&
           verifier.EndTable();
  }
};

struct _tCombatInterfaceBuilder {
  typedef _tCombatInterface Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__combat(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>>> _combat) {
    fbb_.AddOffset(_tCombatInterface::VT__COMBAT, _combat);
  }
  explicit _tCombatInterfaceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tCombatInterface> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tCombatInterface>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tCombatInterface> Create_tCombatInterface(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>>> _combat = 0) {
  _tCombatInterfaceBuilder builder_(_fbb);
  builder_.add__combat(_combat);
  return builder_.Finish();
}

inline flatbuffers::Offset<_tCombatInterface> Create_tCombatInterfaceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>> *_combat = nullptr) {
  auto _combat__ = _combat ? _fbb.CreateVector<flatbuffers::Offset<SoulMeterFBS::History::_tCombat>>(*_combat) : 0;
  return SoulMeterFBS::History::Create_tCombatInterface(
      _fbb,
      _combat__);
}

struct _tCombatLog FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef _tCombatLogBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT__TIME = 4,
    VT__TIMESTAMP = 6,
    VT__LOG_TYPE = 8,
    VT__VAL1 = 10,
    VT__VAL2 = 12
  };
  const SoulMeterFBS::History::_sTime *_time() const {
    return GetStruct<const SoulMeterFBS::History::_sTime *>(VT__TIME);
  }
  int64_t _timestamp() const {
    return GetField<int64_t>(VT__TIMESTAMP, 0);
  }
  uint32_t _log_type() const {
    return GetField<uint32_t>(VT__LOG_TYPE, 0);
  }
  double _val1() const {
    return GetField<double>(VT__VAL1, 0.0);
  }
  double _val2() const {
    return GetField<double>(VT__VAL2, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<SoulMeterFBS::History::_sTime>(verifier, VT__TIME) &&
           VerifyField<int64_t>(verifier, VT__TIMESTAMP) &&
           VerifyField<uint32_t>(verifier, VT__LOG_TYPE) &&
           VerifyField<double>(verifier, VT__VAL1) &&
           VerifyField<double>(verifier, VT__VAL2) &&
           verifier.EndTable();
  }
};

struct _tCombatLogBuilder {
  typedef _tCombatLog Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add__time(const SoulMeterFBS::History::_sTime *_time) {
    fbb_.AddStruct(_tCombatLog::VT__TIME, _time);
  }
  void add__timestamp(int64_t _timestamp) {
    fbb_.AddElement<int64_t>(_tCombatLog::VT__TIMESTAMP, _timestamp, 0);
  }
  void add__log_type(uint32_t _log_type) {
    fbb_.AddElement<uint32_t>(_tCombatLog::VT__LOG_TYPE, _log_type, 0);
  }
  void add__val1(double _val1) {
    fbb_.AddElement<double>(_tCombatLog::VT__VAL1, _val1, 0.0);
  }
  void add__val2(double _val2) {
    fbb_.AddElement<double>(_tCombatLog::VT__VAL2, _val2, 0.0);
  }
  explicit _tCombatLogBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<_tCombatLog> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<_tCombatLog>(end);
    return o;
  }
};

inline flatbuffers::Offset<_tCombatLog> Create_tCombatLog(
    flatbuffers::FlatBufferBuilder &_fbb,
    const SoulMeterFBS::History::_sTime *_time = 0,
    int64_t _timestamp = 0,
    uint32_t _log_type = 0,
    double _val1 = 0.0,
    double _val2 = 0.0) {
  _tCombatLogBuilder builder_(_fbb);
  builder_.add__val2(_val2);
  builder_.add__val1(_val1);
  builder_.add__timestamp(_timestamp);
  builder_.add__log_type(_log_type);
  builder_.add__time(_time);
  return builder_.Finish();
}

inline const SoulMeterFBS::History::_tCombatInterface *Get_tCombatInterface(const void *buf) {
  return flatbuffers::GetRoot<SoulMeterFBS::History::_tCombatInterface>(buf);
}

inline const SoulMeterFBS::History::_tCombatInterface *GetSizePrefixed_tCombatInterface(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SoulMeterFBS::History::_tCombatInterface>(buf);
}

inline bool Verify_tCombatInterfaceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SoulMeterFBS::History::_tCombatInterface>(nullptr);
}

inline bool VerifySizePrefixed_tCombatInterfaceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SoulMeterFBS::History::_tCombatInterface>(nullptr);
}

inline void Finish_tCombatInterfaceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SoulMeterFBS::History::_tCombatInterface> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixed_tCombatInterfaceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SoulMeterFBS::History::_tCombatInterface> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace History
}  // namespace SoulMeterFBS

#endif  // FLATBUFFERS_GENERATED_SWCOMBAT_SOULMETERFBS_HISTORY_H_
